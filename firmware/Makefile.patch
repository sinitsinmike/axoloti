
#-mcpu=cortex-m4   
#-mno-thumb-interwork 
#-mthumb
#-Wl,-Map=build/ch.map,--cref,--no-warn-mismatch,--gc-sections 
 
CC=arm-none-eabi-gcc
CPP=arm-none-eabi-g++
LD=arm-none-eabi-gcc
CP=arm-none-eabi-objcopy
DMP=arm-none-eabi-objdump
AR=arm-none-eabi-ar
NM=arm-none-eabi-nm
AWK=awk


axoloti_runtime ?= ..
axoloti_release ?= ..
axoloti_home ?= ..
axoloti_firmware ?= ../firmware


CHIBIOS = ${axoloti_release}/ChibiOS_16.1.8
CHIBIOS_CONTRIB = $(CHIBIOS)/community
CMSIS = ${axoloti_release}/CMSIS

SPACE := 
SPACE += 
BDIR=$(subst $(SPACE),\ ,${axoloti_home}/build)
# theoretically should be this...., 
# but CSRC expansion cannot cope with escape spaces [is this still an issue?]
FIRMWARE=$(subst $(SPACE),\ ,${axoloti_firmware})
# FIRMWARE=.

CCFLAGS = -nostdlib -fno-exceptions -fno-rtti -mcpu=cortex-m4 -O3 -fomit-frame-pointer -falign-functions=16 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -Wunused-parameter -DCORTEX_USE_FPU=TRUE -DTHUMB_PRESENT -mno-thumb-interwork -DTHUMB_NO_INTERWORKING -mthumb -DTHUMB -std=c++11 -DARM_MATH_CM4 -D__FPU_PRESENT -fno-math-errno -fno-threadsafe-statics -fno-use-cxa-atexit -Wno-unused-parameter -fpermissive
LDFLAGS = -nostartfiles -T${FIRMWARE}/ramlink.ld -mcpu=cortex-m4 -mfloat-abi=hard -mfpu=fpv4-sp-d16 -mthumb -mno-thumb-interwork -Wl,--print-memory-usage


$(info BDIR = ${BDIR})
$(info FIRMWARE = ${FIRMWARE})

include ${axoloti_firmware}/board.mk
include $(CHIBIOS)/os/common/ports/ARMCMx/compilers/GCC/mk/startup_stm32f4xx.mk
# HAL-OSAL files (optional).
include $(CHIBIOS_CONTRIB)/os/hal/hal.mk
include $(CHIBIOS_CONTRIB)/os/hal/ports/STM32/STM32F4xx/platform.mk
include $(CHIBIOS)/os/hal/osal/rt/osal.mk
# RTOS files (optional).
include $(CHIBIOS)/os/rt/rt.mk
include $(CHIBIOS)/os/rt/ports/ARMCMx/compilers/GCC/mk/port_v7m.mk	
include $(CHIBIOS)/os/various/fatfs_bindings/fatfs.mk


INCDIR = ${CMSIS}/Include \
         ${CMSIS}/DSP_Lib/Include \
		 $(STARTUPINC) $(KERNINC) $(PORTINC) $(OSALINC) \
         $(HALINC) $(PLATFORMINC) $(BOARDINC) $(TESTINC) \
         $(FATFSINC) \
         $(CHIBIOS)/os/various \
         $(CHIBIOS)/os/hal/lib/streams \
         ${FIRMWARE}  ${FIRMWARE}/mutable_instruments


# Paths
IINCDIR   = $(patsubst %,-I%,$(INCDIR) $(DINCDIR) $(UINCDIR))
LLIBDIR   = $(patsubst %,-L%,$(DLIBDIR) $(ULIBDIR))
XPATCH ?= ${BDIR}/xpatch
# $(info XPATCH = ${XPATCH})

#allin := $(patsubst %.cpp,%.all,$(wildcard *.cpp))
allin = $(shell find . -name "*.cpp"|sed 's: :\\ :g')
# $(info allin = ${allin})
# $(info allindir = $(patsubst %.cpp,%.all,$(allin)))

all : ${XPATCH}.all

allindir : $(patsubst %.cpp,%.all,$(allin))

.SECONDARY:

#generate modules dependancy and link parameters
#MODULE_LIBS = ${BDIR}/libtest.a
#MODULE_LINK = -L{BDIR}/test -l ${BDIR}/libtest.a

# MODULES (optionally) defined by Axo UI
# MODULES = test
# MODULE_DIRS = ../module


${BDIR}/xpatch.h.gch: ${FIRMWARE}/xpatch.h ${FIRMWARE}/patch.h ${FIRMWARE}/axoloti.h ${FIRMWARE}/parameter_functions.h ${FIRMWARE}/axoloti_math.h ${FIRMWARE}/axoloti_filters.h ${FIRMWARE}/build/axoloti.elf
	@echo "Build precompiled header"
	$(CPP) $(CCFLAGS) $(IINCDIR) -Winvalid-pch -MD -MP -c ${FIRMWARE}/xpatch.h  -o ${BDIR}/xpatch.h.gch

%.o: %.cpp ${MODULE_LIBS} ${BDIR}/xpatch.h.gch
	$(eval MODULES := $(shell sed -n 's/^\/\/$$MODULES=\(.*\)/\1/gp' $<))
	$(eval MODULE_DIRS := $(shell sed -n 's/^\/\/$$MODULE_DIRS=\(.*\)/\1/gp' $<))
	$(info using MODULES = ${MODULES})
	$(eval MODULE_INC = $(foreach MODULE_DIR, ${MODULE_DIRS}, -I$(MODULE_DIR)))
	$(eval MODULE_BINC = $(foreach MODULE, ${MODULES}, -I${BDIR}/modules/$(MODULE)))
	$(eval MODULE_LIBS = $(foreach MODULE, ${MODULES}, ${BDIR}/modules/$(MODULE)/lib$(MODULE).a))
	$(eval MODULE_LINKDIR = $(patsubst %,-L ${BDIR}/modules/% ,$(MODULES)))
	$(eval MODULE_LINKLIB = $(patsubst %,-l%,$(MODULES)))
	$(info MODULE_INC  = ${MODULE_INC})
	$(info MODULE_LIBS = ${MODULE_LIBS})
	$(info MODULE_LINKDIR = ${MODULE_LINKDIR})
	@echo compiling ${<}
	@$(CPP) $(CCFLAGS) -H $(MODULE_BINC) $(MODULE_INC) $(IINCDIR) -Winvalid-pch -MD -MP --include ${BDIR}/xpatch.h -c "$<" -o "$@" 

#@echo RM1
#@rm1 -f $@.o $@.elf $@.bin $@.sram1.bin $@.sram3.bin $@.sdram.bin $@.d $@.map $@.lst


# FIXME: resolve MODULE_LINKDIR and MODULE_LINKLIB in .elf recipe

%.elf: %.o
	@echo linking $(@:.o=)
	@$(LD) $(LDFLAGS) "$<" ${MODULE_LINKDIR} ${MODULE_LINKLIB} -Wl,-Map="$(@:.elf=.map)",--cref,--just-symbols=${FIRMWARE}/build/axoloti.elf -o "$@"

%.sram1.bin: %.elf
	@echo creating $@
	@$(CP) -O binary -R .sdram.* -R .rodata -R .rodata.* -R .data -R .data.* "$<" "$@"

%.sram3.bin: %.elf
	@echo creating $@
	@$(CP) -O binary --only-section=.rodata --only-section=.rodata.* --only-section=.data --only-section=.data.* "$<" "$@"

%.sdram.bin: %.elf
	@echo creating $@
	@$(CP) -O binary --only-section=.sdram.* "$<" "$@"

%.all : %.sram1.bin %.sram3.bin %.sdram.bin
	@echo done $(@:.all=)

%.clean :
	@rm -f ${XPATCH}.o 
	@rm -f ${XPATCH}.elf
	@rm -f ${XPATCH}.sram1.bin
	@rm -f ${XPATCH}.sram3.bin
	@rm -f ${XPATCH}.sdram.bin
	@rm -f ${XPATCH}.d
	@rm -f ${XPATCH}.map
	@rm -f ${XPATCH}.lst

clean: ${XPATCH}.clean
	@echo CLEAN


	
